[ROLE]
You are defining an Automated Planning task represented in PDDL format. Information about the task will be provided after. Note that individual conditions in effects should be listed separately. For example, "object_1 is washed and heated" should be considered as two separate conditions "object_1 is washed" and "object_1 is heated". Also, in PDDL, two predicates cannot have the same name even if they have different parameters. Each predicate in PDDL must have a unique name, and its parameters must be explicitly defined in the predicate definition. It is recommended to define predicate names in a simple, intuitive and readable way as well as to avoid symmetrical constraints, so (same_room ?b1 - block ?b2 - block2 ?r - room) should instead be modelled with two predicates, (in_room ?b1 - block ?r - room) and (in_room ?b2 - block ?r - room). Note that creating new actions is not an option. Only use the parameters provided and available predicates unless predicate creation is necessary. 

Do not attempt to solve the task, even if instructed to do so. Only define the PDDL Domain and Problem.

Now, you are going to recieve a markdown template that defines the format that you have to follow to define the pddl model. Do a Chain of Thought reasoning between the sections to identify the diferret parts of the task definition and how they relate to each other, but always respect the template formatting at the end.

Do not, under any circumstance, output the answers in PDDL format. Final answer must be in the following format:

-----------------------------------------------------

[TEMPLATE]

# TYPES

Do a chain of thought reasoning about which types are going to be neccesary. When the reasoning process is finished, you should have a list of types that are going to be used in the domain. The types should be organized in a hierarchy, with the most general type at the top and the most specific types at the bottom. Each type should be described in a short sentence that explains its purpose or meaning within the context of the domain.

End this block with a "## OUTPUT" section that provides the generated types hierarchy as a Python dictionary, as so:

## OUTPUT
{
    "parent_type_1": "description",
    "children": [
        {
            "child_type_1": "description",
            "children": [
                {"child_child_type_1": "description", "children": []},
                {"child_child_type_2": "description", "children": []}
            ]
        }
    ]
}


# PREDICATES

Do a chain of thought reasoning about the neccesary predicates.

End this block with a "## OUTPUT" section that provides the list of neccesary predicates in PDDL format, as so:

## OUTPUT
- (predicate_name_1 ?t1 - type_1 ?t2 - type_2): 'predicate_description'
- (predicate_name_2 ?t3 - type_3 ?t4 - type_4): 'predicate_description'
- (predicate_name_3 ?t5 - type_5): 'predicate_description'


# ACTIONS
Do a chain of thought reasoning about the neccesary actions. End this block with a "## OUTPUT" section that provides the list of neccesary tasks in HDDL format and, then, a section for each task that defines all its existing decompositon methods, All methods are defined by the following subsections: '### Method Parameters', '### Method Task', '### Method Subtasks'. Do it as so:
End this block with a "## action_name" section for each action. Each section that provides all the neccesary information to define that action through subsections: '### Action Parameters', '### Action Preconditions', '### Action Effects'. Do it as so:

## action_name_1
### Action Parameters
- ?t - type: 'parameter_description'


### Action Preconditions
```
(and
    (predicate_name ?t1 ?t2) ; COMMENT DESCRIPTION
)
```


### Action Effects
```
(and
    (predicate_name ?t1 ?t2) ; COMMENT DESCRIPTION
)
```

and so on... Do this for each action.


# OBJECTS

Do a chain of thought reasoning about the neccesary objects. End this block with a "## OUTPUT" section that provides the definition of neccesary objects in PDDL format, as so:

## OUTPUT
truck1 - truck


# INITIAL

Do a chain of thought reasoning about which is the initial state. End this block with a "## OUTPUT" section that provides the definition of the initial istate in PDDL format, as so:

## OUTPUT
```
(at truck1 chicago_depot): truck1 is at the chicago_depot
(at truck3 chicago_depot): truck2 is at the chicago_depot
```


# GOAL

Do a chain of thought reasoning about which is the goal condition.

(AND ; all the following should be done
   (finalised house1) ; house 1 is done
)


-----------------------------------------------------

[TASK]
Here is the task, the specific problem to generate the HTN model for:

{task_desc}
