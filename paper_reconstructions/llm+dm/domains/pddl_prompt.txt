You are defining the preconditions and effects (represented in PDDL format) of an AI agent's actions. Information about the AI agent will be provided in the domain description. Note that individual conditions in preconditions and effects should be listed separately. For example, "object_1 is washed and heated" should be considered as two separate conditions "object_1 is washed" and "object_1 is heated". Also, in PDDL, two predicates cannot have the same name even if they have different parameters. Each predicate in PDDL must have a unique name, and its parameters must be explicitly defined in the predicate definition. It is recommended to define predicate names in an intuitive and readable way.

End your final answers underneath the headers: '### Action Parameters,' '### Action Preconditions,' '### Action Effects,' and '### New Predicates' with ``` ``` comment blocks in PDDL as so:

### Action Parameters
```
- ?t - type: 'parameter_description'
```

### Action Preconditions
```
(and
    (predicate_name ?t1 ?t2) ; COMMENT DESCRIPTION
)
```

### Action Effects
```
(and
    (predicate_name ?t1 ?t2) ; COMMENT DESCRIPTION
)
```

### New Predicates
```
- (predicate_name ?t1 - type_1 ?t2 - type_2): 'predicate_description'
``` 

If there are no new predicates created, keep an empty space enclosed ```  ``` with the '### New Predicates' header.

=====================================
Here are two examples from the classical BlocksWorld domain for demonstrating the output format.

Domain information: BlocksWorld is a planning domain in artificial intelligence. The AI agent here is a mechanical robot arm that can pick and place the blocks. Only one block may be moved at a time: it may either be placed on the table or placed atop another block. Because of this, any blocks that are, at a given time, under another block cannot be moved. There is only one type of object in this domain, and that is the block.

Example 1
Action: This action enables the robot to put a block onto the table. For example, the robot puts block_1 onto the table.

You can create and define new predicates, but you may also reuse the following predicates:
No predicate has been defined yet

### Action Parameters
```
- ?x - block: the block to put down
```

### Action Preconditions
```
(and
    (robot-holding ?x)
)
```

### Action Effects
```
(and
    (not (robot-holding ?x))
    (block-clear ?x)
    (robot-hand-empty)
    (block-on-table ?x)
)
```

### New Predicates
```
- (robot-holding ?x - block): true if the robot arm is holding the block ?x
- (block-clear ?x - block): true if the block ?x is not under any another block
- (robot-hand-empty): true if the robot arm is not holding any block
- (block-on-table ?x - block): true if the block ?x is placed on the table
``` 


Example 2
Action: This action enables the robot to pick up a block on the table.

You can create and define new predicates, but you may also reuse the following predicates:
1. (robot-holding ?x - block): true if the robot arm is holding the block ?x
2. (block-clear ?x - block): true if the block ?x is not under any another block
3. (robot-hand-empty): true if the robot arm is not holding any block
4. (block-on-table ?x - block): true if the block ?x is placed on the table

### Action Parameters
```
- ?x - block: the block to pick up
```

### Action Preconditions
```
(and
    (block-clear ?x)
    (block-on-table ?x)
    (robot-hand-empty)
)
```

### Action Effects
```
(and
    (not (block-on-table ?x))
    (not (block-clear ?x))
    (not (robot-hand-empty))
    (robot-holding ?x)
)
```

### New Predicates
No new predicates were needed, thus we leave empty
```

```

=====================================
Here is the task to model:

## Domain information: {domain_desc}

## Available predicates, you can construct new ones if necessary
{predicates}

Action: