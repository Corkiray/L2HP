STEP ONE: TYPE EXTRACTION

{'location': 'Locations where blocks can be placed, including the table and atop other blocks.', 'block': 'A subtype of location. Blocks that can be manipulated by the robot and can serve as locations for other blocks.'}

--------------------
STEP TWO: HIERARCHY CONSTRUCTION

[{'location': 'Locations where blocks can be placed, including the table and atop other blocks.', 'children': [{'table': 'A specific type of location where blocks can be placed.', 'children': []}]}, {'block': 'Blocks that can be manipulated by the robot and can serve as locations for other blocks.', 'children': []}]

--------------------
STEP THREE: ACTION EXTRACTION

{'pick_from_table': 'The robot arm picks a block from the table. Requires that the block is on the table and not under another block. Example: The robot picks block_A from the table.', 'pick_from_block': 'The robot arm picks a block from atop another block. Requires that the target block is the topmost block on a stack. Example: The robot picks block_B from block_A.', 'place_on_table': 'The robot arm places a held block onto the table. Requires that the robot is holding a block. Example: The robot places block_C onto the table.', 'place_on_block': 'The robot arm places a held block atop another block. Requires that the destination block is not covered by another block. Example: The robot places block_D onto block_E.'}

--------------------
STEP FOUR: ACTION CONSTRUCTION

ACTIONS:
{'name': 'pick_from_table', 'params': OrderedDict({'?b': 'block'}), 'preconditions': "(and\n    (on-table ?b) ; The block is on the table\n    (clear ?b) ; No block is on top of the block\n    (hand-empty) ; The robot's hand is free\n)", 'effects': '(and\n    (not (on-table ?b)) ; The block is no longer on the table\n    (not (hand-empty)) ; The robot is now holding a block\n    (holding ?b) ; The robot is holding the block\n)'}
{'name': 'pick_from_block', 'params': OrderedDict({'?b': 'block', '?from': 'block'}), 'preconditions': "(and\n    (hand-empty) ; The robot's hand is empty\n    (clear ?b) ; The block ?b has nothing on top\n    (on ?b ?from) ; The block ?b is on block ?from\n)", 'effects': "(and\n    (holding ?b) ; The robot is now holding block ?b\n    (not (hand-empty)) ; The robot's hand is no longer empty\n    (not (on ?b ?from)) ; block ?b is no longer on block ?from\n    (clear ?from) ; block ?from is now clear\n)"}
{'name': 'place_on_table', 'params': OrderedDict({'?b': 'block'}), 'preconditions': '(and\n    (holding ?b) ; The robot is holding block ?b\n)', 'effects': "(and\n    (not (holding ?b)) ; The robot is no longer holding block ?b\n    (on-table ?b) ; The block ?b is now on the table\n    (hand-empty) ; The robot's hand is now empty\n)"}
{'name': 'place_on_block', 'params': OrderedDict({'?b': 'block', '?dest': 'block'}), 'preconditions': '(and\n    (holding ?b) ; The robot is holding block ?b\n    (clear ?dest) ; The destination block ?dest is clear\n)', 'effects': "(and\n    (not (holding ?b)) ; The robot is no longer holding block ?b\n    (hand-empty) ; The robot's hand is now empty\n    (on ?b ?dest) ; Block ?b is now on ?dest\n    (not (clear ?dest)) ; The destination block ?dest is no longer clear\n    (clear ?b) ; The placed block ?b is now clear\n)"}

PREDICATES:
{'name': 'on-table', 'desc': 'true if the block ?b is placed on the table', 'raw': '- (on-table ?b - block): true if the block ?b is placed on the table', 'params': OrderedDict({'?b': 'block'}), 'clean': '(on-table ?b - block)'}
{'name': 'clear', 'desc': 'true if no block is on top of block ?b', 'raw': '- (clear ?b - block): true if no block is on top of block ?b', 'params': OrderedDict({'?b': 'block'}), 'clean': '(clear ?b - block)'}
{'name': 'holding', 'desc': 'true if the robot is currently holding block ?b', 'raw': '- (holding ?b - block): true if the robot is currently holding block ?b', 'params': OrderedDict({'?b': 'block'}), 'clean': '(holding ?b - block)'}
{'name': 'hand-empty', 'desc': "true if the robot's hand is free and not holding any block", 'raw': "- (hand-empty): true if the robot's hand is free and not holding any block", 'params': OrderedDict(), 'clean': '(hand-empty )'}
{'name': 'on', 'desc': 'block ?b1 is on top of block ?b2', 'raw': "- (on ?b1 - block ?b2 - block): 'block ?b1 is on top of block ?b2'", 'params': OrderedDict({'?b1': 'block', '?b2': 'block'}), 'clean': '(on ?b1 - block ?b2 - block)'}

--------------------
STEP FIVE: TASK EXTRACTION

OBJECTS:
{'red': 'block', 'green': 'block', 'blue': 'block', 'yellow': 'block', 'tbl': 'table'}
INITIAL STATES:
[{'pred_name': 'on-table', 'params': ['red'], 'neg': False}, {'pred_name': 'on', 'params': ['blue', 'red'], 'neg': False}, {'pred_name': 'on-table', 'params': ['yellow'], 'neg': False}, {'pred_name': 'on', 'params': ['green', 'yellow'], 'neg': False}, {'pred_name': 'clear', 'params': ['blue'], 'neg': False}, {'pred_name': 'clear', 'params': ['green'], 'neg': False}, {'pred_name': 'hand-empty', 'params': [], 'neg': False}]
GOAL STATES:
[{'pred_name': 'on-table', 'params': ['red'], 'neg': False}, {'pred_name': 'on', 'params': ['green', 'red'], 'neg': False}, {'pred_name': 'on', 'params': ['blue', 'green'], 'neg': False}, {'pred_name': 'on', 'params': ['yellow', 'blue'], 'neg': False}, {'pred_name': 'clear', 'params': ['yellow'], 'neg': False}]


PDDL DOMAIN:
(define (domain blocksworld)
   (:requirements
      :negative-preconditions :strips :typing)

   (:types 
      block
      table - location
   )

   (:predicates 
      (on-table ?b - block)
      (clear ?b - block)
      (holding ?b - block)
      (hand-empty )
      (on ?b1 - block ?b2 - block)
   )

   (:action pick_from_table
      :parameters (
         ?b - block
      )
      :precondition
         (and
             (on-table ?b) ; The block is on the table
             (clear ?b) ; No block is on top of the block
             (hand-empty) ; The robot's hand is free
         )
      :effect
         (and
             (not (on-table ?b)) ; The block is no longer on the table
             (not (hand-empty)) ; The robot is now holding a block
             (holding ?b) ; The robot is holding the block
         )
   )

   (:action pick_from_block
      :parameters (
         ?b ?from - block
      )
      :precondition
         (and
             (hand-empty) ; The robot's hand is empty
             (clear ?b) ; The block ?b has nothing on top
             (on ?b ?from) ; The block ?b is on block ?from
         )
      :effect
         (and
             (holding ?b) ; The robot is now holding block ?b
             (not (hand-empty)) ; The robot's hand is no longer empty
             (not (on ?b ?from)) ; block ?b is no longer on block ?from
             (clear ?from) ; block ?from is now clear
         )
   )

   (:action place_on_table
      :parameters (
         ?b - block
      )
      :precondition
         (and
             (holding ?b) ; The robot is holding block ?b
         )
      :effect
         (and
             (not (holding ?b)) ; The robot is no longer holding block ?b
             (on-table ?b) ; The block ?b is now on the table
             (hand-empty) ; The robot's hand is now empty
         )
   )

   (:action place_on_block
      :parameters (
         ?b ?dest - block
      )
      :precondition
         (and
             (holding ?b) ; The robot is holding block ?b
             (clear ?dest) ; The destination block ?dest is clear
         )
      :effect
         (and
             (not (holding ?b)) ; The robot is no longer holding block ?b
             (hand-empty) ; The robot's hand is now empty
             (on ?b ?dest) ; Block ?b is now on ?dest
             (not (clear ?dest)) ; The destination block ?dest is no longer clear
             (clear ?b) ; The placed block ?b is now clear
         )
   )
)

PDDL PROBLEM:
(define
   (problem blocksworld_problem)
   (:domain blocksworld)

   (:objects 
      red - block
      green - block
      blue - block
      yellow - block
      tbl - table
   )

   (:init
      (on-table red)
      (on blue red)
      (on-table yellow)
      (on green yellow)
      (clear blue)
      (clear green)
      (hand-empty )
   )

   (:goal
      (and 
         (on-table red)
         (on green red)
         (on blue green)
         (on yellow blue)
         (clear yellow)
      )
   )
)