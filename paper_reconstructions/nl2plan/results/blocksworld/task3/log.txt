STEP ONE: TYPE EXTRACTION

{'location': 'Places where blocks can be placed, serving as general types for placement.', 'table': 'A subtype of location serving as the base platform for block placement.', 'block': 'Objects that can be placed on locations or other blocks.'}

--------------------
STEP TWO: HIERARCHY CONSTRUCTION

[{'location': 'Places where blocks can be placed, serving as general types for placement.', 'children': [{'table': 'A subtype of location serving as the base platform for block placement.', 'children': []}]}, {'block': 'Objects that can be placed on locations or other blocks.', 'children': []}]

--------------------
STEP THREE: ACTION EXTRACTION

{'pick_up_block_from_location': 'The robot arm picks up a block from a specific location. Requires the robot arm to be holding no other block, the block to be on the location and not under another block. Example: The robot arm picks up block_1 from table_1.', 'pick_up_block_from_block': 'The robot arm picks up a block from atop another block. Requires the robot arm to be holding no other block, the target block to be clear, and not supporting another block. Example: The robot arm picks up block_2 from block_1.', 'place_block_on_location': 'The robot arm places a held block onto a specific location. Requires the robot arm to be holding the block and the location to be clear. Example: The robot arm places block_1 on table_2.', 'place_block_on_block': 'The robot arm places a held block atop another block. Requires the target block to be clear. Example: The robot arm places block_2 on block_1.'}

--------------------
STEP FOUR: ACTION CONSTRUCTION

ACTIONS:
{'name': 'pick_up_block_from_location', 'params': OrderedDict({'?b': 'block', '?l': 'location'}), 'preconditions': '(and\n    (hand_empty) ; The robot arm is holding nothing\n    (on_location ?b ?l) ; The block is on the specified location\n    (clear_block ?b) ; The block is not under any other block\n)', 'effects': '(and\n    (holding ?b) ; The robot arm is now holding the block\n    (not (hand_empty)) ; The robot arm is no longer empty\n    (not (on_location ?b ?l)) ; The block is no longer on the location\n)'}
{'name': 'pick_up_block_from_block', 'params': OrderedDict({'?b_to_pick': 'block', '?b_support': 'block'}), 'preconditions': '(and\n    (hand_empty) ; The robot arm is not holding any other block\n    (on_block ?b_to_pick ?b_support) ; The target block is on top of the supporting block\n    (clear_block ?b_to_pick) ; The target block has nothing on top of it\n)', 'effects': '(and\n    (not (hand_empty)) ; The robot arm is now holding a block\n    (holding ?b_to_pick) ; The robot arm is holding the target block\n    (not (on_block ?b_to_pick ?b_support)) ; The target block is no longer on the supporting block\n    (clear_block ?b_support) ; The supporting block is now clear\n)'}
{'name': 'place_block_on_location', 'params': OrderedDict({'?b': 'block', '?l': 'location'}), 'preconditions': '(and\n    (holding ?b) ; The robot is holding the block ?b\n    (clear_location ?l) ; The location ?l is clear\n)', 'effects': '(and\n    (not (holding ?b)) ; The robot is no longer holding the block ?b\n    (on_location ?b ?l) ; The block ?b is now on location ?l\n    (not (clear_location ?l)) ; The location ?l is no longer clear\n    (clear_block ?b) ; The placed block ?b is now clear\n)'}
{'name': 'place_block_on_block', 'params': OrderedDict({'?b': 'block', '?target_b': 'block'}), 'preconditions': '(and\n    (holding ?b) ; The robot is holding block ?b\n    (clear_block ?target_b) ; The target block ?target_b is clear\n)', 'effects': '(and\n    (not (holding ?b)) ; The robot is no longer holding block ?b\n    (on_block ?b ?target_b) ; Block ?b is now on top of block ?target_b\n    (not (clear_block ?target_b)) ; Block ?target_b is no longer clear\n    (clear_block ?b) ; Block ?b is now clear\n)'}

PREDICATES:
{'name': 'hand_empty', 'desc': 'true if the robot arm is holding no block', 'raw': "- (hand_empty): 'true if the robot arm is holding no block'", 'params': OrderedDict(), 'clean': '(hand_empty )'}
{'name': 'holding', 'desc': 'true if the robot arm is holding block ?b', 'raw': "- (holding ?b - block): 'true if the robot arm is holding block ?b'", 'params': OrderedDict({'?b': 'block'}), 'clean': '(holding ?b - block)'}
{'name': 'on_location', 'desc': 'true if block ?b is on location ?l', 'raw': "- (on_location ?b - block ?l - location): 'true if block ?b is on location ?l'", 'params': OrderedDict({'?b': 'block', '?l': 'location'}), 'clean': '(on_location ?b - block ?l - location)'}
{'name': 'clear_block', 'desc': 'true if no block is on top of block ?b', 'raw': "- (clear_block ?b - block): 'true if no block is on top of block ?b'", 'params': OrderedDict({'?b': 'block'}), 'clean': '(clear_block ?b - block)'}
{'name': 'on_block', 'desc': 'True if block ?b1 is directly on top of block ?b2', 'raw': '- (on_block ?b1 - block ?b2 - block): True if block ?b1 is directly on top of block ?b2', 'params': OrderedDict({'?b1': 'block', '?b2': 'block'}), 'clean': '(on_block ?b1 - block ?b2 - block)'}
{'name': 'clear_location', 'desc': 'true if no block is on the location ?l', 'raw': '- (clear_location ?l - location): true if no block is on the location ?l', 'params': OrderedDict({'?l': 'location'}), 'clean': '(clear_location ?l - location)'}

--------------------
STEP FIVE: TASK EXTRACTION

OBJECTS:
{'block1': 'block', 'block2': 'block', 'block3': 'block', 'block4': 'block', 'block5': 'block', 'table1': 'location'}
INITIAL STATES:
[{'pred_name': 'on_location', 'params': ['block1', 'table1'], 'neg': False}, {'pred_name': 'on_block', 'params': ['block2', 'block1'], 'neg': False}, {'pred_name': 'on_block', 'params': ['block3', 'block2'], 'neg': False}, {'pred_name': 'on_location', 'params': ['block4', 'table1'], 'neg': False}, {'pred_name': 'on_block', 'params': ['block5', 'block4'], 'neg': False}, {'pred_name': 'clear_block', 'params': ['block3'], 'neg': False}, {'pred_name': 'clear_block', 'params': ['block5'], 'neg': False}, {'pred_name': 'hand_empty', 'params': [], 'neg': False}]
GOAL STATES:
[{'pred_name': 'on_location', 'params': ['block1', 'table1'], 'neg': False}, {'pred_name': 'on_block', 'params': ['block5', 'block1'], 'neg': False}, {'pred_name': 'on_block', 'params': ['block2', 'block5'], 'neg': False}, {'pred_name': 'on_block', 'params': ['block4', 'block2'], 'neg': False}, {'pred_name': 'on_block', 'params': ['block3', 'block4'], 'neg': False}, {'pred_name': 'hand_empty', 'params': [], 'neg': False}]


PDDL DOMAIN:
(define (domain blocksworld)
   (:requirements
      :disjunctive-preconditions :negative-preconditions :strips :typing)

   (:types 
      block
      table - location
   )

   (:predicates 
      (hand_empty )
      (holding ?b - block)
      (on_location ?b - block ?l - location)
      (clear_block ?b - block)
      (on_block ?b1 - block ?b2 - block)
      (clear_location ?l - location)
   )

   (:action pick_up_block_from_location
      :parameters (
         ?b - block ?l - location
      )
      :precondition
         (and
             (hand_empty) ; The robot arm is holding nothing
             (on_location ?b ?l) ; The block is on the specified location
             (clear_block ?b) ; The block is not under any other block
         )
      :effect
         (and
             (holding ?b) ; The robot arm is now holding the block
             (not (hand_empty)) ; The robot arm is no longer empty
             (not (on_location ?b ?l)) ; The block is no longer on the location
         )
   )

   (:action pick_up_block_from_block
      :parameters (
         ?b_to_pick ?b_support - block
      )
      :precondition
         (and
             (hand_empty) ; The robot arm is not holding any other block
             (on_block ?b_to_pick ?b_support) ; The target block is on top of the supporting block
             (clear_block ?b_to_pick) ; The target block has nothing on top of it
         )
      :effect
         (and
             (not (hand_empty)) ; The robot arm is now holding a block
             (holding ?b_to_pick) ; The robot arm is holding the target block
             (not (on_block ?b_to_pick ?b_support)) ; The target block is no longer on the supporting block
             (clear_block ?b_support) ; The supporting block is now clear
         )
   )

   (:action place_block_on_location
      :parameters (
         ?b - block ?l - location
      )
      :precondition
         (and
             (holding ?b) ; The robot is holding the block ?b
             (clear_location ?l) ; The location ?l is clear
         )
      :effect
         (and
             (not (holding ?b)) ; The robot is no longer holding the block ?b
             (on_location ?b ?l) ; The block ?b is now on location ?l
             (not (clear_location ?l)) ; The location ?l is no longer clear
             (clear_block ?b) ; The placed block ?b is now clear
         )
   )

   (:action place_block_on_block
      :parameters (
         ?b ?target_b - block
      )
      :precondition
         (and
             (holding ?b) ; The robot is holding block ?b
             (clear_block ?target_b) ; The target block ?target_b is clear
         )
      :effect
         (and
             (not (holding ?b)) ; The robot is no longer holding block ?b
             (on_block ?b ?target_b) ; Block ?b is now on top of block ?target_b
             (not (clear_block ?target_b)) ; Block ?target_b is no longer clear
             (clear_block ?b) ; Block ?b is now clear
         )
   )
)

PDDL PROBLEM:
(define
   (problem blocksworld_problem)
   (:domain blocksworld)

   (:objects 
      block1 - block
      block2 - block
      block3 - block
      block4 - block
      block5 - block
      table1 - location
   )

   (:init
      (on_location block1 table1)
      (on_block block2 block1)
      (on_block block3 block2)
      (on_location block4 table1)
      (on_block block5 block4)
      (clear_block block3)
      (clear_block block5)
      (hand_empty )
   )

   (:goal
      (and 
         (on_location block1 table1)
         (on_block block5 block1)
         (on_block block2 block5)
         (on_block block4 block2)
         (on_block block3 block4)
         (hand_empty )
      )
   )
)