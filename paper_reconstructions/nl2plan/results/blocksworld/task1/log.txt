STEP ONE: TYPE EXTRACTION

{'location': 'Surfaces where objects can be placed.', 'block': 'A movable object that can be placed on the table or on other blocks.'}

--------------------
STEP TWO: HIERARCHY CONSTRUCTION

[{'location': 'Surfaces where objects can be placed.', 'children': [{'table': 'A specific type of location.', 'children': []}, {'block': 'A movable object that can be placed on the table or on other blocks.', 'children': []}]}]

--------------------
STEP THREE: ACTION EXTRACTION

{'pick_block_from_table': 'The robot arm picks up a specific block from the table. Example: the robot arm picks block A from the table.', 'pick_block_from_block': 'The robot arm picks up a specific block from atop another block. Example: the robot arm picks block A from block B.', 'place_block_on_table': 'The robot arm places a specific block onto the table. Example: the robot arm places block A on the table.', 'place_block_on_block': 'The robot arm places a specific block on top of another block. Example: the robot arm places block A on block B.'}

--------------------
STEP FOUR: ACTION CONSTRUCTION

ACTIONS:
{'name': 'pick_block_from_table', 'params': OrderedDict({'?b': 'block', '?t': 'table'}), 'preconditions': "(and\n    (hand_empty) ; The robot's hand is empty\n    (on_table ?b ?t) ; Block ?b is on table ?t\n    (clear ?b) ; Block ?b has nothing on top\n)", 'effects': "(and\n    (holding ?b) ; The robot is now holding block ?b\n    (not (on_table ?b ?t)) ; Block ?b is no longer on table ?t\n    (not (hand_empty)) ; The robot's hand is no longer empty\n)"}
{'name': 'pick_block_from_block', 'params': OrderedDict({'?b': 'block', '?above': 'block'}), 'preconditions': '(and\n    (on ?b ?above) ; Block ?b is on block ?above\n    (clear ?b) ; Block ?b is clear\n    (hand_empty) ; Robot hand is empty\n)', 'effects': '(and\n    (holding ?b) ; Robot is now holding block ?b\n    (not (hand_empty)) ; Robot hand is no longer empty\n    (not (on ?b ?above)) ; Block ?b is no longer on block ?above\n    (clear ?above) ; Block ?above is now clear\n)'}
{'name': 'place_block_on_table', 'params': OrderedDict({'?b': 'block', '?t': 'table'}), 'preconditions': '(and\n    (holding ?b) ; The robot is holding block ?b\n)', 'effects': "(and\n    (not (holding ?b)) ; The robot is no longer holding block ?b\n    (on_table ?b ?t) ; Block ?b is now on table ?t\n    (hand_empty) ; The robot's hand is now empty\n)"}
{'name': 'place_block_on_block', 'params': OrderedDict({'?b': 'block', '?target': 'block'}), 'preconditions': '(and\n    (holding ?b) ; The robot is holding block ?b\n    (clear ?target) ; The target block ?target is clear\n)', 'effects': '(and\n    (not (holding ?b)) ; The robot is no longer holding block ?b\n    (on ?b ?target) ; Block ?b is now on block ?target\n    (not (clear ?target)) ; Block ?target is no longer clear since ?b is on it\n    (clear ?b) ; Block ?b is now clear as nothing is on top of it\n)'}

PREDICATES:
{'name': 'on_table', 'desc': 'true if block ?b is placed on table ?t', 'raw': '- (on_table ?b - block ?t - table): true if block ?b is placed on table ?t', 'params': OrderedDict({'?b': 'block', '?t': 'table'}), 'clean': '(on_table ?b - block ?t - table)'}
{'name': 'holding', 'desc': 'true if the robot is currently holding block ?b', 'raw': '- (holding ?b - block): true if the robot is currently holding block ?b', 'params': OrderedDict({'?b': 'block'}), 'clean': '(holding ?b - block)'}
{'name': 'hand_empty', 'desc': "true if the robot's hand is empty", 'raw': "- (hand_empty): true if the robot's hand is empty", 'params': OrderedDict(), 'clean': '(hand_empty )'}
{'name': 'clear', 'desc': 'true if there are no blocks on top of block ?b', 'raw': '- (clear ?b - block): true if there are no blocks on top of block ?b', 'params': OrderedDict({'?b': 'block'}), 'clean': '(clear ?b - block)'}
{'name': 'on', 'desc': 'true if block ?b1 is on top of block ?b2', 'raw': '- (on ?b1 - block ?b2 - block): true if block ?b1 is on top of block ?b2', 'params': OrderedDict({'?b1': 'block', '?b2': 'block'}), 'clean': '(on ?b1 - block ?b2 - block)'}

--------------------
STEP FIVE: TASK EXTRACTION

OBJECTS:
{'blue': 'block', 'red': 'block', 'yellow': 'block', 'green': 'block', 'table1': 'table'}
INITIAL STATES:
[{'pred_name': 'on', 'params': ['blue', 'red'], 'neg': False}, {'pred_name': 'on', 'params': ['red', 'yellow'], 'neg': False}, {'pred_name': 'on_table', 'params': ['yellow', 'table1'], 'neg': False}, {'pred_name': 'on_table', 'params': ['green', 'table1'], 'neg': False}, {'pred_name': 'clear', 'params': ['blue'], 'neg': False}, {'pred_name': 'clear', 'params': ['green'], 'neg': False}, {'pred_name': 'hand_empty', 'params': [], 'neg': False}]
GOAL STATES:
[{'pred_name': 'on', 'params': ['red', 'green'], 'neg': False}]


PDDL DOMAIN:
(define (domain blocksworld)
   (:requirements
      :negative-preconditions :strips :typing)

   (:types 
      block table - location
   )

   (:predicates 
      (on_table ?b - block ?t - table)
      (holding ?b - block)
      (hand_empty )
      (clear ?b - block)
      (on ?b1 - block ?b2 - block)
   )

   (:action pick_block_from_table
      :parameters (
         ?b - block ?t - table
      )
      :precondition
         (and
             (hand_empty) ; The robot's hand is empty
             (on_table ?b ?t) ; Block ?b is on table ?t
             (clear ?b) ; Block ?b has nothing on top
         )
      :effect
         (and
             (holding ?b) ; The robot is now holding block ?b
             (not (on_table ?b ?t)) ; Block ?b is no longer on table ?t
             (not (hand_empty)) ; The robot's hand is no longer empty
         )
   )

   (:action pick_block_from_block
      :parameters (
         ?b ?above - block
      )
      :precondition
         (and
             (on ?b ?above) ; Block ?b is on block ?above
             (clear ?b) ; Block ?b is clear
             (hand_empty) ; Robot hand is empty
         )
      :effect
         (and
             (holding ?b) ; Robot is now holding block ?b
             (not (hand_empty)) ; Robot hand is no longer empty
             (not (on ?b ?above)) ; Block ?b is no longer on block ?above
             (clear ?above) ; Block ?above is now clear
         )
   )

   (:action place_block_on_table
      :parameters (
         ?b - block ?t - table
      )
      :precondition
         (and
             (holding ?b) ; The robot is holding block ?b
         )
      :effect
         (and
             (not (holding ?b)) ; The robot is no longer holding block ?b
             (on_table ?b ?t) ; Block ?b is now on table ?t
             (hand_empty) ; The robot's hand is now empty
         )
   )

   (:action place_block_on_block
      :parameters (
         ?b ?target - block
      )
      :precondition
         (and
             (holding ?b) ; The robot is holding block ?b
             (clear ?target) ; The target block ?target is clear
         )
      :effect
         (and
             (not (holding ?b)) ; The robot is no longer holding block ?b
             (on ?b ?target) ; Block ?b is now on block ?target
             (not (clear ?target)) ; Block ?target is no longer clear since ?b is on it
             (clear ?b) ; Block ?b is now clear as nothing is on top of it
         )
   )
)

PDDL PROBLEM:
(define
   (problem blocksworld_problem)
   (:domain blocksworld)

   (:objects 
      blue - block
      red - block
      yellow - block
      green - block
      table1 - table
   )

   (:init
      (on blue red)
      (on red yellow)
      (on_table yellow table1)
      (on_table green table1)
      (clear blue)
      (clear green)
      (hand_empty )
   )

   (:goal
      (and 
         (on red green)
      )
   )
)