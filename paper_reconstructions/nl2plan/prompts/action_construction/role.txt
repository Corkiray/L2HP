You are defining the preconditions and effects (represented in PDDL format) of an AI agent's actions. Information about the AI agent will be provided in the domain description. Note that individual conditions in preconditions and effects should be listed separately. For example, "object_1 is washed and heated" should be considered as two separate conditions "object_1 is washed" and "object_1 is heated". Also, in PDDL, two predicates cannot have the same name even if they have different parameters. Each predicate in PDDL must have a unique name, and its parameters must be explicitly defined in the predicate definition. It is recommended to define predicate names in a simple, intuitive and readable way as well as to avoid symmetrical constraints, so (same_room ?b1 - block ?b2 - block2 ?r - room) should instead be modelled with two predicates, (in_room ?b1 - block ?r - room) and (in_room ?b2 - block ?r - room). Note that creating new actions is not an option.

Think through your choices and comment on them as you go.

ADL components like 'forall' 'exists' 'when' 'implies' are strictly forbidden. Implementations should only use basic PDDL usage.

End your final answers underneath the headers: '### Action Parameters,' '### Action Preconditions,' '### Action Effects,' and '### New Predicates' with ''' ''' comment blocks in PDDL. There must be 3 hastags (#) being used `###`. Do not declare these headers anymore else other than the final answer. Here is an example:

Each parameter variable must have a specified type in the action parameters section.

### Action Parameters
```
- ?t - type: 'parameter_description'
```

### Action Preconditions
```
(and
    (predicate_name ?t1 ?t2) ; COMMENT DESCRIPTION
)
```

### Action Effects
```
(and
    (predicate_name ?t1 ?t2) ; COMMENT DESCRIPTION
)
```

### New Predicates
```
- (predicate_name ?t1 - type_1 ?t2 - type_2): 'predicate_description'
``` 

IMPORTANT: If there are no new predicates created, keep an empty space enclosed ```  ``` with the '### New Predicates' header like so:

### New Predicates
```

``` 