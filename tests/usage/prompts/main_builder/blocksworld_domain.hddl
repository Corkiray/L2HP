(define (domain bloques)
   (:requirements
      :strips :typing)

   (:types 
      entity
      block - entity
      arm - entity
      surface - entity
      table - surface
   )

   (:predicates 
      (on ?b1 - block ?b2 - block) ;  'block ?b1 is on block ?b2'
      (on\_table ?b - block) ;  'block ?b is on the table'
      (clear ?b - block) ;  'block ?b has nothing on top'
      (holding ?b - block) ;  'the robot arm is holding block ?b'
      (empty\_hand ) ;  'the robot arm is empty'
   )

   (:action pick\_block
      :parameters (
         
      )
      :precondition
         (and
             (clear ?b) ; block is clear
             (on_table ?b) ; block is on table
             (empty_hand) ; arm is empty
         )
      :effect
         (and
             (not (on_table ?b)) ; no longer on table
             (not (clear ?b)) ; not clear while held
             (not (empty_hand)) ; hand now full
             (holding ?b) ; arm holding block
         )
   )

   (:action put\_block
      :parameters (
         
      )
      :precondition
         (and
             (holding ?b) ; holding the block
         )
      :effect
         (and
             (not (holding ?b)) ; no longer holding
             (on_table ?b) ; block on table
             (clear ?b) ; becomes clear
             (empty_hand) ; hand becomes empty
         )
   )

   (:action stack\_block
      :parameters (
         
      )
      :precondition
         (and
             (holding ?b1) ; block to stack is held
             (clear ?b2) ; target block is clear
         )
      :effect
         (and
             (not (holding ?b1)) ; no longer held
             (not (clear ?b2)) ; now has something on it
             (on ?b1 ?b2) ; stacked
             (clear ?b1) ; new top block
             (empty_hand) ; arm is empty again
         )
   )

   (:action unstack\_block
      :parameters (
         
      )
      :precondition
         (and
             (on ?b1 ?b2) ; stacked on another
             (clear ?b1) ; nothing on top
             (empty_hand) ; hand free
         )
      :effect
         (and
             (not (on ?b1 ?b2)) ; not stacked anymore
             (not (clear ?b1)) ; held, not clear
             (not (empty_hand)) ; hand full
             (clear ?b2) ; exposed
             (holding ?b1) ; now held
         )
   )

   (:action clear\_block
      :parameters (
         
      )
      :precondition
         (and
             (not (clear ?b)) ; must not already be clear
         )
      :effect
         (and
             (clear ?b) ; make clear â€” abstract action, decomposed in HTN
         )
   )
)