-----------------------------------------------------

[FORMAT]

#TYPES

Do a chain ot thought reasoning about the neccesary types.

End this section with "## OUTPUT" and then the Python dictionary pair '{'name':'description'}' as so:

## OUTPUT
{
    "block": "a stackable object",
    "arm": "the robot manipulator",
}

#TYPES HIERARCHY

Do a chain of thought reasoning about the hierarchy of types.

Organize a dependency tree for the class hierarchy between different objects within a PDDL domain. Do not expand on your reasoning, except as short comments. Each object should appear only once, even if it could belong to several types.  Note, that every child should be a subtype of its parent, not physically contained within the parent. You shouldn't create any new types except those needed for organisation of the provided types.

End this section with "## OUTPUT" and then the Python dictionary pair '{'name':'description'}' as so:

## OUTPUT
{
    "object": "root type for all entities",
    "children": [
        {
            "block": "a stackable object",
            "children": []
        },
        {
            "arm": "the robot manipulator",
            "children": []
        }
    ]
}

# PREDICATES

Do a chain of thought reasoning about the neccesary predicates.

End your final answers starting with "### New Predicates" with  comment blocks in PDDL as so:

### New Predicates
```
- (clear ?b - block): 'block has nothing on top'
- (ontable ?b - block): 'block is on the table'
- (on ?b1 - block ?b2 - block): 'block ?b1 is directly on block ?b2'
- (holding ?a - arm ?b - block): 'arm ?a is holding block ?b'
- (handempty ?a - arm): 'arm ?a holds nothing'
```

# ACTIONS

Do a chain of thought reasoning about the neccesary actions.

End this section underneath the headers for each action: '### Action Parameters,' '### Action Preconditions,' '### Action Effects,' and then split them with '## NEXT ACTION' for the next action as so:

"""
pickup
### Action Parameters
```
- ?a - arm: 'the robot arm'
- ?b - block: 'block to pick up'
```

### Action Preconditions
```
(and
    (ontable ?b)       ; block is on the table
    (clear ?b)         ; nothing on top of block
    (handempty ?a)     ; arm is empty
)
```

### Action Effects
```
(and
    (holding ?a ?b)    ; arm now holds the block
    (not (ontable ?b)) ; block no longer on table
    (not (clear ?b))   ; block no longer clear (being held)
    (not (handempty ?a)) ; arm is no longer empty
)
```

## NEXT ACTION

putdown
### Action Parameters
```
- ?a - arm: 'the robot arm'
- ?b - block: 'block to put down'
```

### Action Preconditions
```
(and
    (holding ?a ?b)    ; arm is holding the block
)
```

### Action Effects
```
(and
    (ontable ?b)       ; block is placed on table
    (clear ?b)         ; block has nothing on top
    (handempty ?a)     ; arm becomes empty
    (not (holding ?a ?b)) ; arm no longer holds the block
)
```

## NEXT ACTION

stack
### Action Parameters
```
- ?a - arm: 'the robot arm'
- ?b1 - block: 'block being placed'
- ?b2 - block: 'block to receive another block'
```

### Action Preconditions
```
(and
    (holding ?a ?b1)   ; arm holds the top block
    (clear ?b2)        ; target block has nothing on top
)
```

### Action Effects
```
(and
    (on ?b1 ?b2)       ; block ?b1 is now on block ?b2
    (clear ?b1)        ; newly placed block has nothing on top
    (not (clear ?b2))  ; target block is no longer clear
    (handempty ?a)     ; arm is empty
    (not (holding ?a ?b1)) ; arm no longer holds the block
)
```

## NEXT ACTION

unstack
### Action Parameters
```
- ?a - arm: 'the robot arm'
- ?b1 - block: 'block being removed'
- ?b2 - block: 'block from which ?b1 is removed'
```

### Action Preconditions
```
(and
    (on ?b1 ?b2)       ; block ?b1 is on block ?b2
    (clear ?b1)        ; top block has nothing on it
    (handempty ?a)     ; arm is empty
)
```

### Action Effects
```
(and
    (holding ?a ?b1)   ; arm picks up the block
    (clear ?b2)        ; lower block becomes clear
    (not (on ?b1 ?b2)) ; block is no longer on the lower block
    (not (clear ?b1))  ; held block is not clear
    (not (handempty ?a)) ; arm is no longer empty
)
```

# OBJECTS

Do a chain of thought reasoning about the neccesary objects.

```
arm1 - arm
block1 - block
block2 - block
block3 - block
```

# INITIAL

Do a chain of thought reasoning about which is the initial state.

```
(ontable block1)
(ontable block2)
(ontable block3)
(clear block1)
(clear block2)
(clear block3)
(handempty arm1)
```

# GOAL

Do a chain of thought reasoning about which is the goal condition.

```
(AND
   (on block1 block2)
   (on block2 block3)
)
```
-----------------------------------------------------
